/* The following code was generated by JFlex 1.4.3 on 30/11/14 9:05 PM */

package com.timepath.quakec.flex;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.timepath.quakec.psi.QCTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/11/14 9:05 PM from the specification file
 * <tt>/home/andrew/IdeaProjects/QuakeCPlugin/src/com/timepath/quakec/flex/_QCLexer.flex</tt>
 */
public class _QCLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\3\1\1\1\1\22\0\1\1\1\37\1\23"+
    "\1\4\1\0\1\31\1\32\1\22\1\50\1\51\1\14\1\27\1\41"+
    "\1\30\1\21\1\13\1\15\11\20\1\43\1\42\1\35\1\26\1\36"+
    "\2\0\6\17\24\24\1\46\1\12\1\47\1\34\1\25\1\0\1\63"+
    "\1\65\1\60\1\5\1\6\1\7\1\56\1\70\1\10\1\24\1\66"+
    "\1\62\1\24\1\11\1\61\2\24\1\55\1\54\1\52\1\64\1\57"+
    "\1\67\1\16\1\53\1\24\1\44\1\33\1\45\1\40\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\5\6\1\7\1\10"+
    "\1\1\1\6\1\1\1\11\2\2\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\10\6\2\36\1\6\1\37\4\6\1\40"+
    "\1\6\1\41\1\0\1\42\1\43\1\0\1\1\3\0"+
    "\1\44\2\0\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\14\6\1\36\3\6\1\65\2\6\1\0"+
    "\1\1\1\66\1\67\1\70\6\6\1\71\5\6\1\36"+
    "\2\6\1\72\2\6\1\73\3\6\1\74\1\6\1\75"+
    "\2\6\1\76\3\6\1\36\2\6\1\77\1\100\5\6"+
    "\1\101\1\102\1\103\1\104\1\36\1\6\1\105\1\106"+
    "\1\107\1\110\1\111\1\6\1\36\1\112\1\6\1\36"+
    "\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u02e5\0\u08e8\0\u0921\0\u095a\0\u0993\0\u02e5"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\71\0\71\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0390\0\u0b22\0\71\0\u03c9\0\u0b5b\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u0b94\0\71\0\u0bcd\0\71\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u02e5\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u0a77\0\71\0\71\0\71\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u02e5\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u02e5\0\u135f\0\u1398\0\71"+
    "\0\u13d1\0\u140a\0\u1443\0\u02e5\0\u147c\0\u02e5\0\u14b5\0\u14ee"+
    "\0\u02e5\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u02e5"+
    "\0\u02e5\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u02e5\0\u02e5"+
    "\0\u02e5\0\u02e5\0\u179a\0\u17d3\0\u02e5\0\u02e5\0\u02e5\0\u02e5"+
    "\0\u02e5\0\u180c\0\u1845\0\u02e5\0\u187e\0\u18b7\0\u02e5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\22\1\16\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\16\1\50\1\51\1\52\1\53\1\54\1\16\1\55"+
    "\2\16\1\56\1\16\1\57\1\16\72\0\2\3\1\4"+
    "\66\0\3\4\65\0\2\60\1\0\2\60\1\61\63\60"+
    "\5\0\1\16\1\62\3\16\3\0\4\16\3\0\2\16"+
    "\24\0\7\16\1\63\7\16\5\0\4\16\1\64\3\0"+
    "\4\16\3\0\2\16\24\0\10\16\1\65\6\16\5\0"+
    "\5\16\3\0\4\16\3\0\2\16\24\0\7\16\1\66"+
    "\1\67\6\16\5\0\2\16\1\70\2\16\3\0\4\16"+
    "\3\0\2\16\24\0\17\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\7\16\1\71\7\16\13\0\1\72"+
    "\1\73\11\0\1\74\70\0\1\75\57\0\1\17\1\76"+
    "\1\0\1\17\1\77\3\0\1\17\50\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\17\16\15\0\1\17\2\0"+
    "\1\17\1\77\3\0\1\17\60\0\1\77\2\0\1\77"+
    "\1\100\3\0\1\77\43\0\12\101\1\102\7\101\1\103"+
    "\46\101\12\104\1\105\10\104\1\103\45\104\5\0\5\16"+
    "\3\0\1\23\2\16\1\23\1\77\2\0\1\16\1\23"+
    "\24\0\17\16\26\0\1\106\70\0\1\107\1\110\67\0"+
    "\1\111\1\0\1\112\66\0\1\113\70\0\1\114\3\0"+
    "\1\115\64\0\1\116\4\0\1\117\63\0\1\120\70\0"+
    "\1\121\6\0\1\122\61\0\1\123\7\0\1\124\60\0"+
    "\1\125\47\0\5\16\3\0\4\16\3\0\2\16\24\0"+
    "\1\126\14\16\1\127\1\16\5\0\1\16\1\130\3\16"+
    "\3\0\4\16\3\0\2\16\24\0\17\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\7\16\1\131\7\16"+
    "\5\0\1\16\1\132\3\16\3\0\4\16\3\0\2\16"+
    "\24\0\7\16\1\133\1\16\1\134\5\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\7\16\1\135\1\16"+
    "\1\136\5\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\7\16\1\137\7\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\3\16\1\140\13\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\16\16\1\141\2\60"+
    "\1\0\70\60\1\0\3\60\1\142\62\60\5\0\2\16"+
    "\1\143\2\16\3\0\4\16\3\0\2\16\24\0\17\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\1\144"+
    "\16\16\5\0\5\16\3\0\4\16\3\0\2\16\24\0"+
    "\2\16\1\145\14\16\5\0\5\16\3\0\4\16\3\0"+
    "\2\16\24\0\3\16\1\146\13\16\5\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\7\16\1\147\7\16\5\0"+
    "\5\16\3\0\4\16\3\0\2\16\24\0\3\16\1\150"+
    "\13\16\2\72\1\0\66\72\14\73\1\151\54\73\5\0"+
    "\3\152\5\0\1\152\1\0\2\152\4\0\1\152\32\0"+
    "\1\152\2\0\1\152\1\0\1\152\20\0\1\77\2\0"+
    "\1\77\4\0\1\77\64\0\1\153\47\0\2\101\1\0"+
    "\66\101\2\104\1\0\66\104\26\0\1\154\70\0\1\155"+
    "\47\0\5\16\3\0\4\16\3\0\2\16\24\0\3\16"+
    "\1\156\13\16\5\0\3\16\1\157\1\16\3\0\4\16"+
    "\3\0\2\16\24\0\17\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\1\160\16\16\5\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\1\161\16\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\6\16\1\162\10\16"+
    "\5\0\3\16\1\163\1\16\3\0\4\16\3\0\2\16"+
    "\24\0\17\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\3\16\1\164\13\16\5\0\4\16\1\165\3\0"+
    "\4\16\3\0\2\16\24\0\17\16\5\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\2\16\1\166\14\16\5\0"+
    "\5\16\3\0\4\16\3\0\2\16\24\0\6\16\1\167"+
    "\10\16\5\0\1\16\1\170\3\16\3\0\4\16\3\0"+
    "\2\16\24\0\17\16\5\0\3\16\1\171\1\16\3\0"+
    "\4\16\3\0\2\16\24\0\17\16\2\60\1\0\4\60"+
    "\1\172\61\60\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\11\16\1\173\5\16\5\0\3\16\1\174\1\16"+
    "\3\0\4\16\3\0\2\16\24\0\17\16\5\0\1\16"+
    "\1\175\3\16\3\0\4\16\3\0\2\16\24\0\17\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\11\16"+
    "\1\176\5\16\5\0\1\16\1\177\3\16\3\0\4\16"+
    "\3\0\2\16\24\0\17\16\13\73\1\200\1\151\54\73"+
    "\5\0\3\16\1\201\1\16\3\0\4\16\3\0\2\16"+
    "\24\0\17\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\1\202\16\16\5\0\5\16\3\0\4\16\3\0"+
    "\2\16\24\0\12\16\1\203\4\16\5\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\7\16\1\204\7\16\5\0"+
    "\5\16\3\0\4\16\3\0\2\16\24\0\1\205\16\16"+
    "\5\0\1\206\4\16\3\0\4\16\3\0\2\16\24\0"+
    "\17\16\5\0\5\16\3\0\4\16\3\0\2\16\24\0"+
    "\1\207\1\16\1\210\14\16\5\0\1\16\1\211\3\16"+
    "\3\0\4\16\3\0\2\16\24\0\17\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\11\16\1\212\5\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\11\16"+
    "\1\213\5\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\10\16\1\214\6\16\2\60\1\0\5\60\1\215"+
    "\60\60\5\0\5\16\3\0\4\16\3\0\2\16\24\0"+
    "\12\16\1\216\4\16\5\0\5\16\3\0\4\16\3\0"+
    "\2\16\24\0\1\217\16\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\1\220\16\16\5\0\2\16\1\221"+
    "\2\16\3\0\4\16\3\0\2\16\24\0\17\16\5\0"+
    "\4\16\1\222\3\0\4\16\3\0\2\16\24\0\17\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\6\16"+
    "\1\223\10\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\3\16\1\224\13\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\7\16\1\225\7\16\5\0\3\16"+
    "\1\226\1\16\3\0\4\16\3\0\2\16\24\0\17\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\1\227"+
    "\16\16\5\0\5\16\3\0\4\16\3\0\2\16\24\0"+
    "\10\16\1\230\6\16\5\0\5\16\3\0\4\16\3\0"+
    "\2\16\24\0\14\16\1\231\2\16\5\0\1\16\1\232"+
    "\3\16\3\0\4\16\3\0\2\16\24\0\17\16\2\60"+
    "\1\0\6\60\1\233\57\60\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\10\16\1\234\6\16\5\0\5\16"+
    "\3\0\4\16\3\0\2\16\24\0\1\16\1\235\15\16"+
    "\5\0\5\16\3\0\4\16\3\0\2\16\24\0\4\16"+
    "\1\236\12\16\5\0\5\16\3\0\4\16\3\0\2\16"+
    "\24\0\16\16\1\237\5\0\4\16\1\240\3\0\4\16"+
    "\3\0\2\16\24\0\17\16\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\3\16\1\241\13\16\5\0\4\16"+
    "\1\242\3\0\4\16\3\0\2\16\24\0\17\16\2\60"+
    "\1\0\3\60\1\243\62\60\5\0\5\16\3\0\4\16"+
    "\3\0\2\16\24\0\1\244\16\16\5\0\5\16\3\0"+
    "\4\16\3\0\2\16\24\0\12\16\1\245\4\16\2\243"+
    "\1\0\7\243\1\246\56\243\5\0\1\16\1\247\3\16"+
    "\3\0\4\16\3\0\2\16\24\0\17\16\1\243\3\246"+
    "\6\243\1\246\56\243";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\33\1\12\11\23\1\1\0\2\11\1\0"+
    "\1\1\3\0\1\11\2\0\14\11\1\1\1\11\1\1"+
    "\1\11\23\1\1\0\1\1\3\11\22\1\1\11\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _QCLexer() {
    this((java.io.Reader)null);
  }


  public _QCLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _QCLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return SPACE;
          }
        case 76: break;
        case 54: 
          { return T_ARGS;
          }
        case 77: break;
        case 19: 
          { return OP_NOT_LOGIC;
          }
        case 78: break;
        case 39: 
          { return OP_INC;
          }
        case 79: break;
        case 59: 
          { return COMMENT_BLOCK;
          }
        case 80: break;
        case 50: 
          { return OP_GE;
          }
        case 81: break;
        case 10: 
          { return OP_ASSIGN;
          }
        case 82: break;
        case 13: 
          { return OP_MODULO;
          }
        case 83: break;
        case 9: 
          { return OP_DOT;
          }
        case 84: break;
        case 1: 
          { return NUMBER;
          }
        case 85: break;
        case 23: 
          { return COLON;
          }
        case 86: break;
        case 74: 
          { return KS_DEFAULT;
          }
        case 87: break;
        case 49: 
          { return OP_LSH;
          }
        case 88: break;
        case 6: 
          { return ID;
          }
        case 89: break;
        case 37: 
          { return OP_EQ;
          }
        case 90: break;
        case 27: 
          { return INDEX_CLOSE;
          }
        case 91: break;
        case 64: 
          { return MOD_NOREF;
          }
        case 92: break;
        case 44: 
          { return OP_AND_LOGIC;
          }
        case 93: break;
        case 41: 
          { return OP_SUB;
          }
        case 94: break;
        case 70: 
          { return T_STRING;
          }
        case 95: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 96: break;
        case 51: 
          { return OP_RSH;
          }
        case 97: break;
        case 12: 
          { return OP_MINUS;
          }
        case 98: break;
        case 53: 
          { return KW_FOR;
          }
        case 99: break;
        case 69: 
          { return T_ENTITY;
          }
        case 100: break;
        case 61: 
          { return T_VOID;
          }
        case 101: break;
        case 20: 
          { return OP_NOT;
          }
        case 102: break;
        case 11: 
          { return OP_PLUS;
          }
        case 103: break;
        case 35: 
          { return OP_MULA;
          }
        case 104: break;
        case 45: 
          { return OP_ORA;
          }
        case 105: break;
        case 26: 
          { return INDEX_OPEN;
          }
        case 106: break;
        case 63: 
          { return T_FLOAT;
          }
        case 107: break;
        case 34: 
          { return OP_DIVA;
          }
        case 108: break;
        case 38: 
          { return OP_ADDA;
          }
        case 109: break;
        case 17: 
          { return OP_LT;
          }
        case 110: break;
        case 29: 
          { return PAREN_CLOSE;
          }
        case 111: break;
        case 42: 
          { return OP_MODA;
          }
        case 112: break;
        case 75: 
          { return KW_CONTINUE;
          }
        case 113: break;
        case 5: 
          { return HASH;
          }
        case 114: break;
        case 56: 
          { return OP_RSHA;
          }
        case 115: break;
        case 22: 
          { return SEMI;
          }
        case 116: break;
        case 31: 
          { return KW_DO;
          }
        case 117: break;
        case 40: 
          { return OP_SUBA;
          }
        case 118: break;
        case 8: 
          { return OP_MULTIPLY;
          }
        case 119: break;
        case 57: 
          { return MOD_VAR;
          }
        case 120: break;
        case 18: 
          { return OP_GT;
          }
        case 121: break;
        case 58: 
          { return KW_ELSE;
          }
        case 122: break;
        case 66: 
          { return MOD_LOCAL;
          }
        case 123: break;
        case 55: 
          { return OP_LSHA;
          }
        case 124: break;
        case 65: 
          { return MOD_CONST;
          }
        case 125: break;
        case 14: 
          { return OP_AND;
          }
        case 126: break;
        case 30: 
          { return PREPROCESSOR;
          }
        case 127: break;
        case 60: 
          { return KW_GOTO;
          }
        case 128: break;
        case 25: 
          { return BRACE_CLOSE;
          }
        case 129: break;
        case 15: 
          { return OP_OR;
          }
        case 130: break;
        case 73: 
          { return T_VECTOR;
          }
        case 131: break;
        case 28: 
          { return PAREN_OPEN;
          }
        case 132: break;
        case 43: 
          { return OP_ANDA;
          }
        case 133: break;
        case 62: 
          { return KW_CASE;
          }
        case 134: break;
        case 33: 
          { return COMMENT_LINE;
          }
        case 135: break;
        case 24: 
          { return BRACE_OPEN;
          }
        case 136: break;
        case 21: 
          { return OP_COMMA;
          }
        case 137: break;
        case 72: 
          { return KW_RETURN;
          }
        case 138: break;
        case 52: 
          { return OP_NE;
          }
        case 139: break;
        case 36: 
          { return STRING;
          }
        case 140: break;
        case 46: 
          { return OP_OR_LOGIC;
          }
        case 141: break;
        case 32: 
          { return KW_IF;
          }
        case 142: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 143: break;
        case 48: 
          { return OP_LE;
          }
        case 144: break;
        case 71: 
          { return KW_SWITCH;
          }
        case 145: break;
        case 68: 
          { return KW_WHILE;
          }
        case 146: break;
        case 16: 
          { return OP_XOR;
          }
        case 147: break;
        case 7: 
          { return OP_DIVIDE;
          }
        case 148: break;
        case 47: 
          { return OP_XORA;
          }
        case 149: break;
        case 67: 
          { return KW_BREAK;
          }
        case 150: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
