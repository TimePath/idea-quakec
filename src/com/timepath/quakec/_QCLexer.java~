/* The following code was generated by JFlex 1.4.3 on 29/11/14 12:59 PM */

package com.timepath.quakec;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.timepath.quakec.psi.QCTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/11/14 12:59 PM from the specification file
 * <tt>/home/andrew/IdeaProjects/SimplePlugin/src/com/timepath/quakec/_QCLexer.flex</tt>
 */
public class _QCLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\12\1\1\1\1\22\0\1\1\1\42\1\17"+
    "\1\3\1\0\1\40\1\43\1\16\1\25\1\26\1\37\1\35\1\24"+
    "\1\36\1\15\1\13\12\14\1\23\1\22\1\46\1\34\1\47\1\33"+
    "\1\0\26\21\1\20\3\21\1\31\1\11\1\32\1\45\1\21\1\0"+
    "\1\61\1\60\1\63\1\4\1\5\1\6\1\65\1\57\1\7\1\21"+
    "\1\62\1\50\1\21\1\10\1\55\2\21\1\52\1\51\1\53\1\54"+
    "\1\64\1\56\1\21\1\66\1\21\1\27\1\44\1\30\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\7\1\10\2\1\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\4\5\1\1\2\2\37\1\0\4\1"+
    "\1\40\1\41\1\42\1\7\2\0\1\43\2\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\0"+
    "\7\1\1\37\1\0\3\1\1\64\1\65\1\66\2\0"+
    "\7\1\1\37\1\0\1\1\1\67\1\1\2\0\4\1"+
    "\1\70\1\1\1\71\1\37\1\0\1\1\1\72\2\0"+
    "\1\1\1\73\1\74\2\1\1\37\1\0\1\75\1\76"+
    "\1\77\1\100\1\1\1\101\1\37\1\102\1\1\1\37"+
    "\1\103\2\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\67\0\u01b8\0\u01ef\0\67\0\u0226\0\u025d\0\u0294\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\67\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\67\0\u082a\0\u0294\0\u0861\0\u0898"+
    "\0\u08cf\0\u0294\0\u0906\0\u093d\0\u0294\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0974\0\u0294\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\67\0\u0294\0\u0294\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\67\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\67\0\u10f9\0\67\0\u1130\0\u1167\0\u119e\0\67"+
    "\0\u11d5\0\u120c\0\u1243\0\67\0\67\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\67\0\u0294\0\u0294\0\67\0\u1356\0\67\0\u138d"+
    "\0\u0294\0\u13c4\0\u13fb\0\67\0\u1432\0\u1469";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\2\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\2"+
    "\1\46\1\47\3\2\1\50\1\2\1\51\2\2\1\52"+
    "\1\53\2\2\4\0\5\2\3\0\1\2\3\0\2\2"+
    "\26\0\17\2\1\0\2\54\1\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\17\2\2\55\1\0\1\55\1\56"+
    "\62\55\5\0\1\57\65\0\4\2\1\60\3\0\1\2"+
    "\3\0\2\2\26\0\1\61\16\2\4\0\5\2\3\0"+
    "\1\2\3\0\2\2\26\0\1\62\4\2\1\63\11\2"+
    "\4\0\2\2\1\64\2\2\3\0\1\2\3\0\2\2"+
    "\26\0\17\2\4\0\5\2\2\0\1\65\1\2\3\0"+
    "\2\2\12\0\1\66\13\0\17\2\4\0\5\2\3\0"+
    "\1\13\1\67\2\0\2\2\26\0\17\2\4\70\5\15"+
    "\1\71\2\70\1\15\1\70\1\72\1\70\2\15\26\70"+
    "\17\15\4\73\5\16\1\74\2\73\1\16\2\73\1\72"+
    "\2\16\26\73\17\16\73\0\5\2\3\0\1\2\3\0"+
    "\2\2\12\0\1\75\13\0\17\2\4\0\5\2\3\0"+
    "\1\2\3\0\2\2\12\0\1\76\1\77\12\0\17\2"+
    "\4\0\5\2\3\0\1\2\3\0\2\2\12\0\1\100"+
    "\1\0\1\101\11\0\17\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\12\0\1\102\13\0\17\2\4\0\5\2"+
    "\3\0\1\2\3\0\2\2\12\0\1\103\13\0\17\2"+
    "\4\0\5\2\3\0\1\2\3\0\2\2\12\0\1\104"+
    "\13\0\17\2\4\0\5\2\3\0\1\2\3\0\2\2"+
    "\21\0\1\105\4\0\17\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\12\0\1\106\7\0\1\107\3\0\17\2"+
    "\4\0\5\2\3\0\1\2\3\0\2\2\12\0\1\110"+
    "\13\0\17\2\4\0\5\2\3\0\1\2\3\0\2\2"+
    "\12\0\1\111\11\0\1\112\1\0\17\2\4\0\5\2"+
    "\3\0\1\2\3\0\2\2\12\0\1\113\12\0\1\114"+
    "\17\2\53\0\1\115\2\0\1\116\14\0\1\2\1\117"+
    "\3\2\3\0\1\2\3\0\2\2\26\0\17\2\4\0"+
    "\5\2\3\0\1\2\3\0\2\2\26\0\7\2\1\120"+
    "\7\2\4\0\5\2\3\0\1\2\3\0\2\2\26\0"+
    "\2\2\1\121\14\2\4\0\5\2\3\0\1\2\3\0"+
    "\2\2\26\0\5\2\1\122\3\2\1\123\5\2\4\0"+
    "\1\2\1\124\3\2\3\0\1\2\3\0\2\2\26\0"+
    "\5\2\1\125\11\2\1\0\2\54\64\0\2\55\1\0"+
    "\66\55\1\0\2\55\1\126\61\55\6\0\1\127\64\0"+
    "\5\2\3\0\1\2\3\0\2\2\26\0\3\2\1\130"+
    "\13\2\4\0\5\2\3\0\1\2\3\0\2\2\26\0"+
    "\1\2\1\131\15\2\4\0\5\2\3\0\1\2\3\0"+
    "\2\2\26\0\5\2\1\132\11\2\4\0\5\2\3\0"+
    "\1\2\3\0\2\2\26\0\2\2\1\133\14\2\2\65"+
    "\1\0\64\65\14\0\1\67\52\0\11\70\1\71\4\70"+
    "\1\72\52\70\1\0\64\70\11\73\1\74\5\73\1\72"+
    "\51\73\1\0\64\73\34\0\1\134\66\0\1\135\104\0"+
    "\1\136\23\0\1\137\63\0\5\2\3\0\1\2\3\0"+
    "\2\2\26\0\3\2\1\140\13\2\4\0\3\2\1\141"+
    "\1\2\3\0\1\2\3\0\2\2\26\0\17\2\4\0"+
    "\1\2\1\142\3\2\3\0\1\2\3\0\2\2\26\0"+
    "\17\2\4\0\4\2\1\143\3\0\1\2\3\0\2\2"+
    "\26\0\17\2\4\0\5\2\3\0\1\2\3\0\2\2"+
    "\26\0\1\2\1\144\15\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\13\2\1\145\3\2\4\0\3\2"+
    "\1\146\1\2\3\0\1\2\3\0\2\2\26\0\17\2"+
    "\2\55\1\0\3\55\1\147\60\55\61\0\1\150\11\0"+
    "\3\2\1\151\1\2\3\0\1\2\3\0\2\2\26\0"+
    "\17\2\4\0\1\2\1\152\3\2\3\0\1\2\3\0"+
    "\2\2\26\0\17\2\4\0\5\2\3\0\1\2\3\0"+
    "\2\2\26\0\11\2\1\153\5\2\7\0\1\154\132\0"+
    "\1\155\17\0\5\2\3\0\1\2\3\0\2\2\26\0"+
    "\4\2\1\156\12\2\4\0\5\2\3\0\1\2\3\0"+
    "\2\2\26\0\1\157\16\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\11\2\1\160\5\2\4\0\5\2"+
    "\3\0\1\2\3\0\2\2\26\0\3\2\1\161\13\2"+
    "\4\0\1\2\1\162\3\2\3\0\1\2\3\0\2\2"+
    "\26\0\17\2\4\0\5\2\3\0\1\2\3\0\2\2"+
    "\26\0\3\2\1\163\13\2\4\0\1\164\4\2\3\0"+
    "\1\2\3\0\2\2\26\0\17\2\2\55\1\0\4\55"+
    "\1\165\57\55\54\0\1\166\16\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\3\2\1\167\13\2\4\0\5\2"+
    "\3\0\1\2\3\0\2\2\26\0\3\2\1\170\13\2"+
    "\10\0\1\171\141\0\1\172\7\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\2\2\1\173\14\2\4\0\1\2"+
    "\1\174\3\2\3\0\1\2\3\0\2\2\26\0\17\2"+
    "\4\0\5\2\3\0\1\2\3\0\2\2\26\0\12\2"+
    "\1\175\4\2\4\0\3\2\1\176\1\2\3\0\1\2"+
    "\3\0\2\2\26\0\17\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\5\2\1\177\11\2\2\55\1\0"+
    "\5\55\1\200\56\55\50\0\1\201\22\0\5\2\3\0"+
    "\1\2\3\0\2\2\26\0\16\2\1\202\65\0\1\203"+
    "\60\0\1\204\13\0\4\2\1\205\3\0\1\2\3\0"+
    "\2\2\26\0\17\2\4\0\4\2\1\206\3\0\1\2"+
    "\3\0\2\2\26\0\17\2\4\0\5\2\3\0\1\2"+
    "\3\0\2\2\26\0\2\2\1\207\14\2\2\55\1\0"+
    "\2\55\1\210\61\55\53\0\1\211\17\0\5\2\3\0"+
    "\1\2\3\0\2\2\26\0\4\2\1\212\12\2\2\210"+
    "\1\0\6\210\1\213\55\210\4\0\1\2\1\214\3\2"+
    "\3\0\1\2\3\0\2\2\26\0\17\2\1\210\1\213"+
    "\1\215\6\210\2\213\54\210\1\216\2\215\6\216\2\215"+
    "\56\216\1\0\6\216\1\215\55\216";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\15\1\1\11\37\1\1\0\6\1\1\11\1\1"+
    "\2\0\1\11\2\0\15\11\1\1\1\11\1\1\2\0"+
    "\10\1\1\0\4\1\2\11\2\0\10\1\1\0\3\1"+
    "\2\0\10\1\1\0\2\1\2\0\6\1\1\0\1\1"+
    "\2\11\4\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _QCLexer() {
    this((java.io.Reader)null);
  }


  public _QCLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _QCLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { return T_FLOAT;
          }
        case 69: break;
        case 51: 
          { return OP_RSH;
          }
        case 70: break;
        case 50: 
          { return OP_GE;
          }
        case 71: break;
        case 42: 
          { return OP_MODA;
          }
        case 72: break;
        case 20: 
          { return OP_ADD;
          }
        case 73: break;
        case 35: 
          { return L_STRING;
          }
        case 74: break;
        case 39: 
          { return OP_SUBA;
          }
        case 75: break;
        case 21: 
          { return OP_SUB;
          }
        case 76: break;
        case 30: 
          { return OP_GT;
          }
        case 77: break;
        case 63: 
          { return KW_SWITCH;
          }
        case 78: break;
        case 18: 
          { return OP_TERN;
          }
        case 79: break;
        case 26: 
          { return OP_BIT_AND;
          }
        case 80: break;
        case 24: 
          { return OP_BIT_NOT;
          }
        case 81: break;
        case 19: 
          { return OP_ASSIGN;
          }
        case 82: break;
        case 43: 
          { return OP_NE;
          }
        case 83: break;
        case 5: 
          { return OP_ESCAPE;
          }
        case 84: break;
        case 14: 
          { return PL;
          }
        case 85: break;
        case 66: 
          { return KW_DEFAULT;
          }
        case 86: break;
        case 59: 
          { return KW_WHILE;
          }
        case 87: break;
        case 61: 
          { return T_ENTITY;
          }
        case 88: break;
        case 15: 
          { return PR;
          }
        case 89: break;
        case 64: 
          { return KW_RET;
          }
        case 90: break;
        case 11: 
          { return COMMA;
          }
        case 91: break;
        case 36: 
          { return OP_EQ;
          }
        case 92: break;
        case 60: 
          { return KW_BREAK;
          }
        case 93: break;
        case 31: 
          { return PREPROCESSOR_ANY;
          }
        case 94: break;
        case 3: 
          { return HASH;
          }
        case 95: break;
        case 9: 
          { return SEMI;
          }
        case 96: break;
        case 22: 
          { return OP_MUL;
          }
        case 97: break;
        case 57: 
          { return T_VOID;
          }
        case 98: break;
        case 45: 
          { return OP_BIT_ORA;
          }
        case 99: break;
        case 48: 
          { return OP_LE;
          }
        case 100: break;
        case 10: 
          { return COLON;
          }
        case 101: break;
        case 53: 
          { return OP_LSHA;
          }
        case 102: break;
        case 40: 
          { return OP_DEC;
          }
        case 103: break;
        case 32: 
          { return KW_IF;
          }
        case 104: break;
        case 38: 
          { return OP_INC;
          }
        case 105: break;
        case 62: 
          { return T_STRING;
          }
        case 106: break;
        case 49: 
          { return OP_LSH;
          }
        case 107: break;
        case 7: 
          { return L_NUMBER;
          }
        case 108: break;
        case 29: 
          { return OP_LT;
          }
        case 109: break;
        case 27: 
          { return OP_BIT_OR;
          }
        case 110: break;
        case 41: 
          { return OP_MULA;
          }
        case 111: break;
        case 47: 
          { return OP_BIT_XORA;
          }
        case 112: break;
        case 33: 
          { return LINE_COMMENT;
          }
        case 113: break;
        case 68: 
          { return PREPROCESSOR_DEFINE;
          }
        case 114: break;
        case 1: 
          { return ID;
          }
        case 115: break;
        case 55: 
          { return KW_ELSE;
          }
        case 116: break;
        case 65: 
          { return T_VECTOR;
          }
        case 117: break;
        case 56: 
          { return KW_CASE;
          }
        case 118: break;
        case 23: 
          { return OP_MOD;
          }
        case 119: break;
        case 67: 
          { return KW_CONTINUE;
          }
        case 120: break;
        case 8: 
          { return OP_DOT;
          }
        case 121: break;
        case 37: 
          { return OP_ADDA;
          }
        case 122: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 123: break;
        case 6: 
          { return OP_DIV;
          }
        case 124: break;
        case 54: 
          { return OP_RSHA;
          }
        case 125: break;
        case 52: 
          { return KW_FOR;
          }
        case 126: break;
        case 12: 
          { return BL;
          }
        case 127: break;
        case 46: 
          { return OP_OR;
          }
        case 128: break;
        case 16: 
          { return SL;
          }
        case 129: break;
        case 44: 
          { return OP_AND;
          }
        case 130: break;
        case 25: 
          { return OP_NOT;
          }
        case 131: break;
        case 13: 
          { return BR;
          }
        case 132: break;
        case 17: 
          { return SR;
          }
        case 133: break;
        case 28: 
          { return OP_BIT_XOR;
          }
        case 134: break;
        case 34: 
          { return OP_DIVA;
          }
        case 135: break;
        case 4: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
